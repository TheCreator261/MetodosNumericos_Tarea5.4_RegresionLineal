# -*- coding: utf-8 -*-
"""Tarea 5.4 Regresion Lineal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lDtDSVNmG9IiI5lzdqjRcQ5I2k3ivf0m
"""

#Antonio Josue Rodriguez Falcon
#Ejercicio 1: Resistencia de Materiales

import numpy as np
import matplotlib.pyplot as plt

# Datos del problema
x = np.array([5, 10, 15, 20, 25])  # Carga (kN)
y = np.array([0.6, 1.2, 1.9, 2.5, 3.1])  # Elongación (mm)

# Cálculo de los coeficientes
n = len(x)
sum_x = np.sum(x)
sum_y = np.sum(y)
sum_xy = np.sum(x * y)
sum_x2 = np.sum(x**2)

# Fórmulas de regresión lineal
b = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x**2)
a = (sum_y - b * sum_x) / n

print("Resultados del ajuste lineal:")
print(f"a (intercepto) = {a:.4f} mm")
print(f"b (pendiente) = {b:.4f} mm/kN")
print("\nInterpretación física:")
print(f"La pendiente b = {b:.4f} mm/kN representa la constante elástica del material,")
print("es decir, cuántos mm se alarga la barra por cada kN de carga aplicada.")

# Predicción usando el modelo
y_pred = a + b * x

# Gráfica
plt.figure(figsize=(8,6))
plt.plot(x, y, 'bo', label='Datos experimentales')
plt.plot(x, y_pred, 'r-', label=f'Ajuste lineal: y = {a:.3f} + {b:.3f}x')
plt.xlabel('Carga aplicada (kN)', fontsize=12)
plt.ylabel('Elongación (mm)', fontsize=12)
plt.title('Regresión lineal para comportamiento elástico', fontsize=14)
plt.legend(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.savefig('ejercicio1_regresion.png', dpi=300, bbox_inches='tight')
plt.show()

#Antonio Josue Rodriguez Falcon
#Ejercicio 2: Transferencia de Calor

import numpy as np
import matplotlib.pyplot as plt

# Datos del problema
x = np.array([0, 2, 4, 6, 8])  # Posición (cm)
y = np.array([100, 92, 85, 78, 71])  # Temperatura (°C)

# Cálculo de los coeficientes
n = len(x)
sum_x = np.sum(x)
sum_y = np.sum(y)
sum_xy = np.sum(x * y)
sum_x2 = np.sum(x**2)

# Fórmulas de regresión lineal
b = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x**2)
a = (sum_y - b * sum_x) / n

print("Resultados del ajuste lineal:")
print(f"a (intercepto) = {a:.4f} °C")
print(f"b (pendiente) = {b:.4f} °C/cm")

# Estimación en x = 5 cm
x_eval = 5
y_eval = a + b * x_eval
print(f"\nTemperatura estimada en x = {x_eval} cm: {y_eval:.1f} °C")

# Predicción usando el modelo
y_pred = a + b * x

# Gráfica
plt.figure(figsize=(8,6))
plt.plot(x, y, 'bo', label='Datos experimentales')
plt.plot(x, y_pred, 'r-', label=f'Ajuste lineal: y = {a:.1f} + {b:.1f}x')
plt.plot([x_eval], [y_eval], 'gs', label=f'Estimación en x={x_eval}cm')
plt.xlabel('Posición a lo largo de la barra (cm)', fontsize=12)
plt.ylabel('Temperatura (°C)', fontsize=12)
plt.title('Regresión lineal para distribución de temperatura', fontsize=14)
plt.legend(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.savefig('ejercicio2_regresion.png', dpi=300, bbox_inches='tight')
plt.show()

#Antonio Josue Rodriguez Falcon
#Ejercicio 3: Caudal en Tuberías

import numpy as np
import matplotlib.pyplot as plt

# Datos del problema
x = np.array([50, 70, 90, 110, 130])  # Presión (kPa)
y = np.array([15, 21, 27, 33, 39])  # Caudal (L/min)

# Cálculo de los coeficientes
n = len(x)
sum_x = np.sum(x)
sum_y = np.sum(y)
sum_xy = np.sum(x * y)
sum_x2 = np.sum(x**2)

# Fórmulas de regresión lineal
b = (n * sum_xy - sum_x * sum_y) / (n * sum_x2 - sum_x**2)
a = (sum_y - b * sum_x) / n

print("Resultados del ajuste lineal:")
print(f"a (intercepto) = {a:.4f} L/min")
print(f"b (pendiente) = {b:.4f} L/(min·kPa)")

# Predicción para presión de 100 kPa
x_eval = 100
y_eval = a + b * x_eval
print(f"\nCaudal estimado para P = {x_eval} kPa: {y_eval:.1f} L/min")

# Predicción usando el modelo
y_pred = a + b * x

# Gráfica
plt.figure(figsize=(8,6))
plt.plot(x, y, 'bo', label='Datos experimentales')
plt.plot(x, y_pred, 'r-', label=f'Ajuste lineal: y = {a:.1f} + {b:.2f}x')
plt.plot([x_eval], [y_eval], 'gs', label=f'Estimación para P={x_eval}kPa')
plt.xlabel('Presión (kPa)', fontsize=12)
plt.ylabel('Caudal (L/min)', fontsize=12)
plt.title('Regresión lineal para relación presión-caudal', fontsize=14)
plt.legend(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)
plt.savefig('ejercicio3_regresion.png', dpi=300, bbox_inches='tight')
plt.show()